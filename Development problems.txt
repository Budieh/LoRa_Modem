Problems met during development:

1) SPI serial interface:

Problem:
The first step in the development of this project would be to ensure that the serial interface works as expected. As this is not possible using the logic analyzer I have available, the serial interface communicating at too high a speed (2.5 Mbps), I had to find an alternative solution.
An additional problem that showed up in this stage was related to the speeds that could be reached with the help of the serial interface, considering that, initially, the shield containing the sx1261 chip was not mounted directly on the board containing the microcontroller, being connected to it by wires.

Solution:
I initialized two SPI peripherals (a master and a slave) on the Nucleo board and made them communicate with each other, making sure of the functionality of the master, thus ensuring that I can use it for communication with the SX1261 modem.
Indeed, connecting the shield to the board with wires generated unwanted additional impedance that limited the possible speeds that could be reached to 1 Mbps (according to my tests), a problem that was combated by direct mounting, which allowed comfortable touch of a transfer speed of 2.5 Mbps.


2) LoRa Tx and Rx setup and debug:

Problem:
Setup instructions for basic transmission and reception operations are described in the datasheet of the SX1261 chip, but verifying a successful communication between two chips proves to be a difficult task because, as the LoRa modem is separated from the microcontroller, that means there’s no access to traditional methods of debug such as stopping the execution of its code, viewing the contents of memory / registers, etc.

Solution:
A methodical approach to the problem, using the tools provided by the chip.
First of all, we have at our disposal the status pins of the chip: the busy pin, which is in high state while the chip processes a command given by the microcontroller, which allows to visualize the sending of a valid command to the chip. After that, we have the interrupt pin, which turns to high state when an event occurs during transmission, reception (transmission / reception complete, timeout, preamble detected, etc.). This pin allows us to see that the reception / transmission was successfully initiated and that an event determined its completion.
Secondly, we have the status instructions that can be used to obtain information about the internal state of the chip (its internal states can be visualized in the state machine representation in the data sheet). The first of these is GetStatus(), an instruction that allows us to obtain information about the state in which the chip is found following a command sent to it, a fact that can confirm or deny the desired behavior. The second is GetIrqStatus(), an instruction that goes hand-in-hand with the interrupt pin, allowing the visualization of the event that triggered the interrupt, thus confirming / denying a successful transmission / reception.
Finally, we have the instruction to view the content of the chip registers, ReadReg(), the values found in them can be an indicator of the correct operation of the chip, in the case of registers such as the status register.

3) Problems related to radio transmission:

Problem:
This problem is generated by the reflection of radio waves in an enclosed space, causing a message sent by a modem to be received by the same modem after a short time.
This problem was all the more serious as my transmission logic was based on a ping-pong transaction between two modems: each byte sent by a transmitter had to be sent back to it by the receiver to confirm reception, thus allowing the transmission of the next byte. The reception by the transmitter of a byte sent by itself blocks this whole process, compromising the transmission of all the following bytes.
Another problem that appeared in this chapter is the reception of incomplete messages, because a received message is considered complete when a carriage return is received. For this reason, sometimes empty messages were received due to the reception of a carriage return.

Solution:
Confirming the transmission of a byte using an expression calculated based on the transmitted byte, but different from it. 
By this, I want that the receiver should use a different byte than the transmitted one to confirm the transmission, thus avoiding the transmitter to confirm a transmission by itself. As a byte represents an ascii code between 0 and 127, a good and simple variant for a confirmation byte is represented by 127 minus the ascii code of the byte. As 127 is an odd number, we are thus confirmed that no byte will be similar to the corresponding confirmation byte.
As for the problem with the unwanted reception of a carriage return, this was combated by filtering the received message before displaying it. If it does not contain any characters other than the carriage return, this message will be considered as garbage and will be ignored.

4) Problems with the implementation of the continuous reception mode:

Problem:
Initially, the user had to enter a special character to initiate a transmission or reception operation. Because it’s not wanted for the one who transmits and the one who receives to have to know what the other one is doing at a certain moment in order to be able to communicate, I wanted the board to be in a continuous reception mode, the transmission being able to be initiated by pressing a button. This operation would give rise to synchronization problems because a clear sequence of operations must be sent through the serial interface in a certain order to achieve a successful transmission / reception operation, order that could be compromised by interrupting the reception operation by a transmission.

Solution:
Using a flag variable to indicate the initiation of a transmission, I made sure that the reception is interrupted when this variable changes its value from false to true. I also made sure that any interruption of the reception state is followed by a transition of the chip to the standby state, to reset the sequence of operations used to initiate a reception and thus allow the successful initiation of a transmission operation.
